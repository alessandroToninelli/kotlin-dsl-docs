import static groovy.io.FileType.FILES

dokka {
  group = null
  moduleName = "api"
  outputDirectory = "build/docs/dokka"
  jdkVersion = 8
  processConfigurations = [ 'dokkaDependencies' ]
  sourceDirs = [ gradleKotlinDslApiSources.sourceDir,
                 gradleApiSources.sourceDir,
                 gradlePluginsAccessors.accessorsDir ]
  includes = [ 'src/dokka/gsk.md' ]
  doFirst {
      file(outputDirectory).deleteDir()
  }
}

task checkApiDocumentation {
    dependsOn dokka
    group = "verification"
    description = "Runs checks on the generated API documentation."
    def apiDocsRoot = file(dokka.outputDirectory)
    inputs.dir apiDocsRoot
    doLast {
        def gradleApiFound = false
        def gradleKotlinDslApiFound = false
        def gradleKotlinDslGeneratedApiFound = false
        def gradlePluginsAccessorsFound = false
        def filesWithErrorClass = []
        apiDocsRoot.traverse(type: FILES) { file ->
            def text = file.text
            if(text.contains("ERROR CLASS")) {
                filesWithErrorClass += file
            }
            if(!gradleApiFound && text.contains("id=\"org.gradle.api.Project\$task")) {
                gradleApiFound = true
            }
            if(!gradleKotlinDslApiFound && text.contains("id=\"org.gradle.kotlin.dsl.KotlinBuildScript")) {
                gradleKotlinDslApiFound = true
            }
            if(!gradleKotlinDslGeneratedApiFound && text.contains("embeddedKotlinVersion")) {
                gradleKotlinDslGeneratedApiFound = true
            }
            if(!gradlePluginsAccessorsFound && text.contains("name=\"org.gradle.kotlin.dsl\$checkstyle#org.gradle.api.Project")) {
                gradlePluginsAccessorsFound = true
            }
        }
        if(!gradleApiFound) {
            throw new Exception("API documentation does not include Gradle API")
        }
        if(!gradleKotlinDslApiFound) {
            throw new Exception("API documentation does not include Gradle Kotlin DSL")
        }
        if(!gradleKotlinDslGeneratedApiFound) {
            throw new Exception("API documentation does not include *generated* Gradle Kotlin DSL")
        }
        if(!gradlePluginsAccessorsFound) {
            throw new Exception("API documentation does not include *generated* Gradle Plugins accessors")
        }
        if(filesWithErrorClass) {
            throw new Exception("<ERROR CLASS> found in ${filesWithErrorClass.size()} files:\n  ${filesWithErrorClass.join('\n  ')}")
        }
    }
}
